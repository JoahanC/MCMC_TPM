	SUBROUTINE DMR8_NABORS(NPIX,NN,NABES)
C
C	GIVEN INPUT PIXEL NPIX, FIND ITS NEIGHBORS INCLUDING DIAGONAL ONES
C	PUT # OF NEIGHBORS INTO NN
C	AND PIXEL NUMBERS OF THE NEIGHBORS INTO NABES(1),...NABES(NN)
C	tested 7-JUL-1992: NN is always 7 or 8 and 2.0 < dist < 4.6 degrees
C	NN=7 only for the 24 corner pixels
C
	INTEGER NABES(8)
	REAL*4 C(3),X,Y,XI,ETA
	INTEGER JD(10) /1,1,0,-1,-1,-1,0,1,1,1/
	COMMON /DMRBIT/ IXTAB(32),IYTAB(32)
C
	IF(IXTAB(32).EQ.0) THEN		!Make sure the bit table is set
	  C(1)=1.
	  CALL DMR_PIXNO(C,NABES)
	ENDIF
	NFACE=NPIX/1024		!Get face
	JPIX=NPIX-NFACE*1024
	IX=0
	IY=0
	IP=1
10	IF(JPIX.EQ.0) GO TO 100		!Break up even and odd bits
	  ID=MOD(JPIX,2)
	  JPIX=JPIX/2
	  IX=ID*IP+IX
	  ID=MOD(JPIX,2)
	  JPIX=JPIX/2
	  IY=ID*IP+IY
	  IP=2*IP
	  GO TO 10
C
100	NN = 0
	IF (MAX(ABS(IX-15.5),ABS(IY-15.5)).GT.15.25) GO TO 300
	DO 200 I=1,8
	  CALL EDGCHK(NFACE,IX+JD(I),IY,32,MFACE,JX,JY)
	  CALL EDGCHK(MFACE,JX,JY+JD(I+2),32,LFACE,KX,KY)
	  NABES(NN+1)=LFACE*1024+IXTAB(KX+1)+IYTAB(KY+1)
	  IF (NPIX.EQ.NABES(NN+1)) GO TO 200
	  DO 150 J=1,NN
	    IF (NABES(J).EQ.NABES(NN+1)) GO TO 200
150	  CONTINUE
	  NN = NN+1
200	CONTINUE
	RETURN
C
C	slow but sure for corners AND edges
C
300	X = (IX-15.5)/16.
	Y = (IY-15.5)/16.
	CALL FORWARD_CUBE(X,Y,XI,ETA)
	DO 400 I=1,8
	  X=XI+JD(I)/16.	!Database coordinates.  Range
	  Y=ETA+JD(I+2)/16.	! -1 -> 1 covers the square face
	  CALL XYAXIS(NFACE,X,Y,C)
	  CALL DMR_PIXNO(C,NABES(NN+1))
	  IF (NPIX.EQ.NABES(NN+1)) GO TO 400
	  DO 350 J=1,NN
	    IF (NABES(J).EQ.NABES(NN+1)) GO TO 400
350	  CONTINUE
	  NN = NN+1
400	CONTINUE
	RETURN
	END
